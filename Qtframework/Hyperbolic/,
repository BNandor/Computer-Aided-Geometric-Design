#ifndef INDICATORSPHERE_H
#define INDICATORSPHERE_H

#include "../Parametric/ParametricSurfaces3.h"
#include "Test/TestFunctions.h"

namespace cagd {
  class IndicatorSphere{
  private:
    TriangularMatrix<ParametricSurface3::PartialDerivative> sphereDerivatives;
    ParametricSurface3* sphereSurface;
    TriangulatedMesh3 * sphereImage;
    GLdouble sphereScale=0.03;
  public:
    GLboolean generateSphereImage(DCoordinate3 offset){
      if(sphereImage){
          delete sphereImage;
        }
      sphereImage = sphereSurface->GenerateImage(20,20,offset,sphereScale,true);
      sphereImage->UpdateVertexBufferObjects();
      return sphereImage!=nullptr;
    }
    TriangulatedMesh3* getImage(){return sphereImage;}
    IndicatorSphere(GLdouble scale):sphereScale(scale),sphereDerivatives(3){
      sphereDerivatives(0,0)=surface3::d00;
      sphereDerivatives(1,0)=surface3::d10;
      sphereDerivatives(1,1)=surface3::d01;
      sphereSurface=new ParametricSurface3(sphereDerivatives,surface3::u_min,surface3::u_max,surface3::v_min,surface3::v_max);
    }
    ~IndicatorSphere(){
      if(sphereImage)delete  sphereImage;
      if(sphereSurface)delete sphereSurface;
    }
  };
}
#endif // INDICATORSPHERE_H
